
***************Tests for shuffle() function***************
**Test Configuration: #Players = 4, Player Shuffling = 2**
Correct result for deck with zero cards.
Correct result for deck with one card.
Correct result for deck with all of the same cards.
Correct result for 5-card deck with mixed cards.
Correct result for 10-card deck with mixed cards.
Correct result for 20-card deck with mixed cards.
Correct result for consecutive shuffles.
**Test Configuration: #Players = 4, Player Shuffling = 4**
Correct result for sending player greater than max player.
**Test Configuration: #Players = 4, Player Shuffling = -1**
Correct result for sending player that is negative number.

***********Tests for initializeGame() function*************
Correct result for too few players.
Correct result for too many players.
Correct result for duplicate kingdom cards.
Every player should have 5 cards in their hand at the start of the game
The hand of Player 1 has 0 cards rather than 5
Every player should have 5 cards in their deck at the start of the game
The deck of Player 1 has 0 cards rather than 5
###Incorrect result for 2 players and kingdom deck with no victory cards. See description above.
Every player should have 5 cards in their hand at the start of the game
The hand of Player 1 has 0 cards rather than 5
Every player should have 5 cards in their deck at the start of the game
The deck of Player 1 has 0 cards rather than 5
###Incorrect result for 2 players and kingdom deck with victory cards. See description above.
Every player should have 5 cards in their hand at the start of the game
The hand of Player 1 has 0 cards rather than 5
Every player should have 5 cards in their deck at the start of the game
The deck of Player 1 has 0 cards rather than 5
Every player should have 5 cards in their hand at the start of the game
The hand of Player 2 has 0 cards rather than 5
Every player should have 5 cards in their deck at the start of the game
The deck of Player 2 has 0 cards rather than 5
###Incorrect result for 3 players and kingdom deck with no victory cards. See description above.
Every player should have 5 cards in their hand at the start of the game
The hand of Player 1 has 0 cards rather than 5
Every player should have 5 cards in their deck at the start of the game
The deck of Player 1 has 0 cards rather than 5
Every player should have 5 cards in their hand at the start of the game
The hand of Player 2 has 0 cards rather than 5
Every player should have 5 cards in their deck at the start of the game
The deck of Player 2 has 0 cards rather than 5
###Incorrect result for 3 players and kingdom deck with victory cards. See description above.
Every player should have 5 cards in their hand at the start of the game
The hand of Player 1 has 0 cards rather than 5
Every player should have 5 cards in their deck at the start of the game
The deck of Player 1 has 0 cards rather than 5
Every player should have 5 cards in their hand at the start of the game
The hand of Player 2 has 0 cards rather than 5
Every player should have 5 cards in their deck at the start of the game
The deck of Player 2 has 0 cards rather than 5
Every player should have 5 cards in their hand at the start of the game
The hand of Player 3 has 0 cards rather than 5
Every player should have 5 cards in their deck at the start of the game
The deck of Player 3 has 0 cards rather than 5
###Incorrect result for 4 players and kingdom deck with no victory cards. See description above.
Every player should have 5 cards in their hand at the start of the game
The hand of Player 1 has 0 cards rather than 5
Every player should have 5 cards in their deck at the start of the game
The deck of Player 1 has 0 cards rather than 5
Every player should have 5 cards in their hand at the start of the game
The hand of Player 2 has 0 cards rather than 5
Every player should have 5 cards in their deck at the start of the game
The deck of Player 2 has 0 cards rather than 5
Every player should have 5 cards in their hand at the start of the game
The hand of Player 3 has 0 cards rather than 5
Every player should have 5 cards in their deck at the start of the game
The deck of Player 3 has 0 cards rather than 5
###Incorrect result for 4 players and kingdom deck with victory cards. See description above.

***************Tests for endTurn() function***************
endTurn() changed the number of cards in the deck of Player 1.
endTurn() changed the number of cards in the hand of Player 1.
Player 0 did not draw 5 cards at the end of the turn
###Incorrect result for 2-person game going from Player 0 to Player 1. See description above.
endTurn() changed the number of cards in the deck of Player 1.
endTurn() changed the number of cards in the hand of Player 1.
Incorrect number of cards in discard pile for Player 0
Player 0 did not draw 5 cards at the end of the turn
###Incorrect result for 2-person game going from Player 0 to Player 1 with played cards. See description above.
endTurn() changed the number of cards in the deck of Player 0.
endTurn() changed the number of cards in the hand of Player 0.
Player 1 did not draw 5 cards at the end of the turn
###Incorrect result for 2-person game going from Player 1 to Player 0. See description above.
endTurn() changed the number of cards in the deck of Player 2.
endTurn() changed the number of cards in the hand of Player 2.
Player 1 did not draw 5 cards at the end of the turn
###Incorrect result for 4-person game going from Player 1 to Player 2. See description above.
endTurn() changed the number of cards in the deck of Player 0.
endTurn() changed the cards in the hand of Player 0.
Player 3 did not draw 5 cards at the end of the turn
###Incorrect result for 4-person game going from Player 3 to Player 0. See description above.

***************Tests for isGameOver() function***************
Correct result for newly started game.
Correct result for game with no province cards.
Correct result for game with 3 empty supply piles.
Correct result for game with 2 empty supply piles.

***************Tests for Smithy Card***************
*Test Conditions: #Players = 4, Current Player = 0*
Player 0 hand count is incorrect after Smithy played
Smithy was not properly discarded into the played card deck
###Incorrect result playing Smithy with more than 3 cards in the original deck. See description above
Player 0 hand count is incorrect after Smithy played
Smithy was not properly discarded into the played card deck
###Incorrect result playing Smithy with fewer than 3 cards in the original deck. See description above
Correct result - player was not allowed to play Smithy because he/she had no actions left.

***************Tests for Adventurer Card***************
***Test Conditions: #Players = 3, Current Player = 0***
Current player did not pick up 2 Treasures and discard non-Treasure cards as required
Non-Treasure cards were not discarded as should have occurred
###Incorrect result for Adventurer with a deck with 3 Treasures. See description above.
Current player did not pick up 2 Treasures and discard non-Treasure cards as required
Non-Treasure cards were not discarded as should have occurred
###Incorrect result for Adventurer with a deck and discard with 1 Treasure each. See description above.
Current player did not pick up 1 Treasure and discard non-Treasure cards as required
Non-Treasure cards were not discarded as should have occurred
###Incorrect result for Adventurer with a deck and discard with a total of 1 Treasure. See description above.

***************Tests for Feast Card***************
*Test Conditions: #Players = 2, Current Player = 1*
Correct result playing Feast in hand with no Treasures to gain a cost 5 card.
Correct result playing Feast in hand with no Treasures to gain a cost 4 card.
None of that card left, sorry!
Correct result playing Feast to unsuccessfully gain a card that is no longer in the supply.
That card is too expensive!
Correct result playing Feast to unsuccessfully try to gain a cost 6 card.
Card chosen from the supply cost more than 5
###Incorrect result playing Feast in hand with 3 coppers to try gaining a cost 6 card. See description above.
None of that card left, sorry!
Correct result playing Feast to unsuccessfully try to gain a card greater than max supply card.
###Incorrect result playing Feast to try to gain a card with id value less than zero.

***************Tests for Mine***************
Correct result when using Mine to trash copper and gain silver.
Correct result when using Mine to unsuccessfully try to trash copper and gain gold.
###Incorrect result when using Mine to gain non-Treasure card.
Correct result when using Mine to unsuccessfully try to gain card greater than the range of supply.
Correct result when using Mine to unsuccessfully try to gain card with id value -1.
Correct result when using Mine to unsuccessfully try to trash sea_hag and gain silver.
Correct result when using Mine to unsuccessfully try to trash province and gain silver.
Correct result when using Mine to unsuccessfully try to trash card with handPos = -1.
Correct result when using Mine to unsuccessfully try to trash card with handPos = handCount.
Correct result when using Mine to trash silver and gain gold.

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'mineEffect'
Lines executed:100.00% of 17
Branches executed:100.00% of 14
Taken at least once:92.86% of 14
Calls executed:100.00% of 6

Function 'minionEffect'
Lines executed:0.00% of 18
Branches executed:0.00% of 18
Taken at least once:0.00% of 18
Calls executed:0.00% of 7

Function 'feastEffect'
Lines executed:100.00% of 12
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
Calls executed:100.00% of 8

Function 'smithyEffect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'adventurerEffect'
Lines executed:100.00% of 23
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 4

Function 'cardEffect'
Lines executed:7.34% of 177
Branches executed:16.08% of 143
Taken at least once:4.20% of 143
Calls executed:10.20% of 49

Function 'getCost'
Lines executed:33.33% of 30
Branches executed:100.00% of 28
Taken at least once:28.57% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:100.00% of 20
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:92.86% of 14
Branches executed:100.00% of 10
Taken at least once:80.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:98.39% of 62
Branches executed:100.00% of 46
Taken at least once:97.83% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:47.70% of 564
Branches executed:46.47% of 411
Taken at least once:36.01% of 411
Calls executed:40.20% of 102
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2234 returned 100% blocks executed 100%
     2234:    8:int compare(const void* a, const void* b) {
     2234:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       47:   10:    return 1;
     2187:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
      644:   12:    return -1;
     1543:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 47 returned 100% blocks executed 98%
       47:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       47:   44:  SelectStream(1);
call    0 returned 100%
       47:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       47:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       45:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      487:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     4869:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     4427:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       44:   73:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   74:    {
       11:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       33:   77:  else if (numPlayers == 3)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -:   78:    {
       15:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       18:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       44:   87:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   88:    {
       11:   89:      state->supplyCount[estate] = 8;
       11:   90:      state->supplyCount[duchy] = 8;
       11:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       33:   95:      state->supplyCount[estate] = 12;
       33:   96:      state->supplyCount[duchy] = 12;
       33:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       44:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       44:  102:  state->supplyCount[silver] = 40;
       44:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      924:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     7260:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     6820:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      440:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
      150:  115:		  if (numPlayers == 2){ 
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       13:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       62:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      365:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      440:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     6380:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      183:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  139:    {
      139:  140:      state->deckCount[i] = 0;
      556:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      417:  143:	  state->deck[i][j] = estate;
      417:  144:	  state->deckCount[i]++;
        -:  145:	}
     1112:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      973:  148:	  state->deck[i][j] = copper;
      973:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      183:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  155:    {
      139:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:      {
    #####:  158:	  return -1;
        -:  159:      }
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      183:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      139:  166:      state->handCount[i] = 0;
      139:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //  {
        -:  171:      //      drawCard(i, state);
        -:  172:      //  }
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1232:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     1188:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       44:  182:  state->outpostPlayed = 0;
       44:  183:  state->phase = 0;
       44:  184:  state->numActions = 1;
       44:  185:  state->numBuys = 1;
       44:  186:  state->playedCardCount = 0;
       44:  187:  state->whoseTurn = 0;
       44:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      264:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      220:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       44:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       44:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 155 returned 100% blocks executed 100%
      155:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203: 
        -:  204:  int newDeck[MAX_DECK];
      155:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      155:  209:  if (state->deckCount[player] < 1)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        7:  210:    return -1;
      148:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1759:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1463:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     1463:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1463:  217:    newDeckPos++;
     4156:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 65%
branch  1 taken 35% (fallthrough)
     2693:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1463:  221:    state->deckCount[player]--;
        -:  222:  }
     1611:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1463:  224:    state->deck[player][i] = newDeck[i];
     1463:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      148:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 23 returned 100% blocks executed 93%
       23:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       23:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       23:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       23:  243:  if ( state->numActions < 1 )
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       22:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
       22:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
        2:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       20:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
        -:  259:    {
        8:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       12:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       12:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
       12:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 22 returned 100% blocks executed 100%
       22:  315:int handCard(int handPos, struct gameState *state) {
       22:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       22:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 14 returned 100% blocks executed 100%
       14:  320:int supplyCount(int card, struct gameState *state) {
       14:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 67 returned 100% blocks executed 100%
       67:  346:int whoseTurn(struct gameState *state) {
       67:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 5 returned 100% blocks executed 100%
        5:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        5:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
       28:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
       23:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       23:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        5:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        5:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        3:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        2:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        5:  370:  state->outpostPlayed = 0;
        5:  371:  state->phase = 0;
        5:  372:  state->numActions = 1;
        5:  373:  state->coins = 0;
        5:  374:  state->numBuys = 1;
        5:  375:  state->playedCardCount = 0;
        5:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       30:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        5:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
        5:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        4:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        3:  401:  j = 0;
       78:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       75:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  405:	{
        5:  406:	  j++;
        -:  407:	}
        -:  408:    }
        3:  409:  if ( j >= 3)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 268 returned 100% blocks executed 100%
      268:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      268:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       13:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        9:  534:      state->deck[player][i] = state->discard[player][i];
        9:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        4:  538:    state->deckCount[player] = state->discardCount[player];
        4:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        4:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        4:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        4:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        4:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        4:  559:    if (deckCounter == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  560:      return -1;
        -:  561:
        3:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  563:    state->deckCount[player]--;
        3:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      264:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      264:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      264:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      264:  576:    state->deckCount[player]--;
      264:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      267:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 20 returned 100% blocks executed 33%
       20:  583:int getCost(int cardNumber)
        -:  584:{
       20:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 10%
branch  3 taken 0%
branch  4 taken 20%
branch  5 taken 20%
branch  6 taken 20%
branch  7 taken 10%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 5%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 10%
branch 27 taken 5%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        4:  596:      return 0;
        -:  597:    case silver:
        4:  598:      return 3;
        -:  599:    case gold:
        4:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 20 returned 100% blocks executed 5%
       20:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       20:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       20:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       20:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       20:  660:  int z = 0;// this is the counter for the temp hand
       20:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       15:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
       20:  667:  switch( card ) 
branch  0 taken 15%
branch  1 taken 0%
branch  2 taken 35%
branch  3 taken 0%
branch  4 taken 40%
branch  5 taken 0%
branch  6 taken 10%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        3:  670:       return adventurerEffect(state, handPos); 
call    0 returned 100%
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
call    0 never executed
        -:  688:	    }
        -:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        7:  697:       return feastEffect(choice1, state, handPos);
call    0 returned 100%
        -:  698:			
        -:  699:    case gardens:
    #####:  700:      return -1;
        -:  701:			
        -:  702:    case mine:
        8:  703:      return mineEffect(choice1, choice2, state, handPos);
call    0 returned 100%
        -:  704:			
        -:  705:    case remodel:
    #####:  706:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  707:
    #####:  708:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:	{
    #####:  710:	  return -1;
        -:  711:	}
        -:  712:
    #####:  713:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  714:
        -:  715:      //discard card from hand
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:      //discard trashed card
    #####:  719:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  720:	{
    #####:  721:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  722:	    {
    #####:  723:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  724:	      break;
        -:  725:	    }
        -:  726:	}
        -:  727:
        -:  728:
    #####:  729:      return 0;
        -:  730:		
        -:  731:    case smithy:
        -:  732:      //+3 Cards
        2:  733:      return smithyEffect(state, handPos);
call    0 returned 100%
        -:  734:		
        -:  735:    case village:
        -:  736:      //+1 Card
    #####:  737:      drawCard(currentPlayer, state);
call    0 never executed
        -:  738:			
        -:  739:      //+2 Actions
    #####:  740:      state->numActions = state->numActions + 2;
        -:  741:			
        -:  742:      //discard played card from hand
    #####:  743:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  744:      return 0;
        -:  745:		
        -:  746:    case baron:
    #####:  747:      state->numBuys++;//Increase buys by 1!
    #####:  748:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  749:	int p = 0;//Iterator for hand!
    #####:  750:	int card_not_discarded = 1;//Flag for discard set!
    #####:  751:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  752:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  753:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  754:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  755:	    state->discardCount[currentPlayer]++;
    #####:  756:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  757:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  758:	    }
    #####:  759:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  760:	    state->handCount[currentPlayer]--;
    #####:  761:	    card_not_discarded = 0;//Exit the loop
        -:  762:	  }
    #####:  763:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  764:	    if(DEBUG) {
        -:  765:	      printf("No estate cards in your hand, invalid choice\n");
        -:  766:	      printf("Must gain an estate if there are any\n");
        -:  767:	    }
    #####:  768:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  769:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  770:	      state->supplyCount[estate]--;//Decrement estates
    #####:  771:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  772:		isGameOver(state);
call    0 never executed
        -:  773:	      }
        -:  774:	    }
    #####:  775:	    card_not_discarded = 0;//Exit the loop
        -:  776:	  }
        -:  777:			    
        -:  778:	  else{
    #####:  779:	    p++;//Next card
        -:  780:	  }
        -:  781:	}
        -:  782:      }
        -:  783:			    
        -:  784:      else{
    #####:  785:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  786:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  787:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  788:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  789:	    isGameOver(state);
call    0 never executed
        -:  790:	  }
        -:  791:	}
        -:  792:      }
        -:  793:	    
        -:  794:      
    #####:  795:      return 0;
        -:  796:		
        -:  797:    case great_hall:
        -:  798:      //+1 Card
    #####:  799:      drawCard(currentPlayer, state);
call    0 never executed
        -:  800:			
        -:  801:      //+1 Actions
    #####:  802:      state->numActions++;
        -:  803:			
        -:  804:      //discard card from hand
    #####:  805:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  806:      return 0;
        -:  807:		
        -:  808:    case minion:
    #####:  809:      return minionEffect(choice1, choice2, state, handPos);
call    0 never executed
        -:  810:		
        -:  811:    case steward:
    #####:  812:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  813:	{
        -:  814:	  //+2 cards
    #####:  815:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  816:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  817:	}
    #####:  818:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  819:	{
        -:  820:	  //+2 coins
    #####:  821:	  state->coins = state->coins + 2;
        -:  822:	}
        -:  823:      else
        -:  824:	{
        -:  825:	  //trash 2 cards in hand
    #####:  826:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  827:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  828:	}
        -:  829:			
        -:  830:      //discard card from hand
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  832:      return 0;
        -:  833:		
        -:  834:    case tribute:
    #####:  835:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  836:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  837:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  838:	  state->deckCount[nextPlayer]--;
        -:  839:	}
    #####:  840:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  841:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  842:	  state->discardCount[nextPlayer]--;
        -:  843:	}
        -:  844:	else{
        -:  845:	  //No Card to Reveal
        -:  846:	  if (DEBUG){
        -:  847:	    printf("No cards to reveal\n");
        -:  848:	  }
        -:  849:	}
        -:  850:      }
        -:  851:	    
        -:  852:      else{
    #####:  853:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  854:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  855:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  856:	    state->deckCount[nextPlayer]++;
    #####:  857:	    state->discard[nextPlayer][i] = -1;
    #####:  858:	    state->discardCount[nextPlayer]--;
        -:  859:	  }
        -:  860:			    
    #####:  861:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  862:	} 
    #####:  863:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  864:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  865:	state->deckCount[nextPlayer]--;
    #####:  866:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  867:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  868:	state->deckCount[nextPlayer]--;
        -:  869:      }    
        -:  870:		       
    #####:  871:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  872:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  873:	state->playedCardCount++;
    #####:  874:	tributeRevealedCards[1] = -1;
        -:  875:      }
        -:  876:
    #####:  877:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  878:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  879:	  state->coins += 2;
        -:  880:	}
        -:  881:		    
    #####:  882:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  883:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  884:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  885:	}
        -:  886:	else{//Action Card
    #####:  887:	  state->numActions = state->numActions + 2;
        -:  888:	}
        -:  889:      }
        -:  890:	    
    #####:  891:      return 0;
        -:  892:		
        -:  893:    case ambassador:
    #####:  894:      j = 0;		//used to check if player has enough cards to discard
        -:  895:
    #####:  896:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  897:	{
    #####:  898:	  return -1;				
        -:  899:	}
        -:  900:
    #####:  901:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  902:	{
    #####:  903:	  return -1;
        -:  904:	}
        -:  905:
    #####:  906:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  907:	{
    #####:  908:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  909:	    {
    #####:  910:	      j++;
        -:  911:	    }
        -:  912:	}
    #####:  913:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  914:	{
    #####:  915:	  return -1;				
        -:  916:	}
        -:  917:
        -:  918:      if (DEBUG) 
        -:  919:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  920:
        -:  921:      //increase supply count for choosen card by amount being discarded
    #####:  922:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  923:			
        -:  924:      //each other player gains a copy of revealed card
    #####:  925:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  926:	{
    #####:  927:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  928:	    {
    #####:  929:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  930:	    }
        -:  931:	}
        -:  932:
        -:  933:      //discard played card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  935:
        -:  936:      //trash copies of cards returned to supply
    #####:  937:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  940:	    {
    #####:  941:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  942:		{
    #####:  943:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  944:		  break;
        -:  945:		}
        -:  946:	    }
        -:  947:	}			
        -:  948:
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case cutpurse:
        -:  952:
    #####:  953:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  954:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  955:	{
    #####:  956:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  957:	    {
    #####:  958:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  959:		{
    #####:  960:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  961:		    {
    #####:  962:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  963:		      break;
        -:  964:		    }
    #####:  965:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  966:		    {
    #####:  967:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  968:			{
        -:  969:			  if (DEBUG)
        -:  970:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  971:			}	
    #####:  972:		      break;
        -:  973:		    }		
        -:  974:		}
        -:  975:					
        -:  976:	    }
        -:  977:				
        -:  978:	}				
        -:  979:
        -:  980:      //discard played card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  982:
    #####:  983:      return 0;
        -:  984:
        -:  985:		
        -:  986:    case embargo: 
        -:  987:      //+2 Coins
    #####:  988:      state->coins = state->coins + 2;
        -:  989:			
        -:  990:      //see if selected pile is in play
    #####:  991:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  992:	{
    #####:  993:	  return -1;
        -:  994:	}
        -:  995:			
        -:  996:      //add embargo token to selected supply pile
    #####:  997:      state->embargoTokens[choice1]++;
        -:  998:			
        -:  999:      //trash card
    #####: 1000:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case outpost:
        -: 1004:      //set outpost flag
    #####: 1005:      state->outpostPlayed++;
        -: 1006:			
        -: 1007:      //discard card
    #####: 1008:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1009:      return 0;
        -: 1010:		
        -: 1011:    case salvager:
        -: 1012:      //+1 buy
    #####: 1013:      state->numBuys++;
        -: 1014:			
    #####: 1015:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1016:	{
        -: 1017:	  //gain coins equal to trashed card
    #####: 1018:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1019:	  //trash card
    #####: 1020:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1021:	}
        -: 1022:			
        -: 1023:      //discard card
    #####: 1024:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1025:      return 0;
        -: 1026:		
        -: 1027:    case sea_hag:
    #####: 1028:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1029:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1030:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1031:	  state->discardCount[i]++;
    #####: 1032:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1033:	}
        -: 1034:      }
    #####: 1035:      return 0;
        -: 1036:		
        -: 1037:    case treasure_map:
        -: 1038:      //search hand for another treasure_map
    #####: 1039:      index = -1;
    #####: 1040:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1041:	{
    #####: 1042:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1043:	    {
    #####: 1044:	      index = i;
    #####: 1045:	      break;
        -: 1046:	    }
        -: 1047:	}
    #####: 1048:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1049:	{
        -: 1050:	  //trash both treasure cards
    #####: 1051:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1052:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1053:
        -: 1054:	  //gain 4 Gold cards
    #####: 1055:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1056:	    {
    #####: 1057:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1058:	    }
        -: 1059:				
        -: 1060:	  //return success
    #####: 1061:	  return 1;
        -: 1062:	}
        -: 1063:			
        -: 1064:      //no second treasure_map found in hand
    #####: 1065:      return -1;
        -: 1066:    }
        -: 1067:	
    #####: 1068:  return -1;
        -: 1069:}
        -: 1070:
function adventurerEffect called 3 returned 100% blocks executed 100%
        3: 1071:int adventurerEffect(struct gameState *state, int handPos) {
        3: 1072:   int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1073:   int temphand[MAX_HAND];
        3: 1074:   int drawntreasure = 0;
        -: 1075:   int cardDrawn;
        -: 1076:   int topCard;
        3: 1077:   int y = 0; // counter for the shuffle
        3: 1078:   int z = 0; // counter for temp hand
        -: 1079:
       23: 1080:   while(drawntreasure < 2) {
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -: 1081:      // if the deck is empty, we need to shuffle discard and add to deck
       17: 1082:      if(state->deckCount[currentPlayer] < 1) {
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        3: 1083:         shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1084:      }
       17: 1085:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1086:      // top card is most recently drawn card
       17: 1087:      topCard = state->handCount[currentPlayer] - 1;
       17: 1088:      cardDrawn = state->hand[currentPlayer][topCard];
       17: 1089:      if(cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 93% (fallthrough)
branch  3 taken 7%
branch  4 taken 21% (fallthrough)
branch  5 taken 79%
        6: 1090:         drawntreasure++;
        -: 1091:      }
        -: 1092:      else {
       11: 1093:         temphand[z] = cardDrawn;
        -: 1094:         // remove the top card (the most recently drawn one)
       11: 1095:         state->handCount[currentPlayer]--;
       11: 1096:         z++;
        -: 1097:      }
        -: 1098:   }
        -: 1099:   // discard all non-treasure cards that have been drawn
       14: 1100:   while((z - 1) > 0) {
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        8: 1101:      topCard = state->discardCount[currentPlayer];
        8: 1102:      state->discard[currentPlayer][topCard++] = temphand[z - 1];
        8: 1103:      state->discardCount[currentPlayer] = topCard;
        8: 1104:      z = z - 1;
        -: 1105:   }
        -: 1106:   // discard the adventurer card from hand
        3: 1107:   discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1108:
        3: 1109:   return 0;
        -: 1110:}
        -: 1111:
        -: 1112:// smithy allows a player to draw 3 cards
function smithyEffect called 2 returned 100% blocks executed 100%
        2: 1113:int smithyEffect(struct gameState *state, int handPos) {
        2: 1114:   int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1115:   int i;
        -: 1116:
        8: 1117:   for(i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6: 1118:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1119:   }
        2: 1120:   return 0;
        -: 1121:}
        -: 1122:
        -: 1123:// feast allows you to gain a card with a cost up to 5
function feastEffect called 7 returned 100% blocks executed 100%
        7: 1124:int feastEffect(int choice, struct gameState *state, int handPos) {
        7: 1125:   int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1126:   int cardCountHand;
        -: 1127:   int cardCountDeck;
        -: 1128:   int cardCountDiscard;
        -: 1129:   int cardCountTotal;
        -: 1130:
        -: 1131:   // Update coins for buy
        7: 1132:   updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        -: 1133:   // Buy one card
        7: 1134:   if(supplyCount(choice, state) <= 0) {
call    0 returned 100%
branch  1 taken 29% (fallthrough)
branch  2 taken 71%
        2: 1135:      printf("None of that card left, sorry!\n");
call    0 returned 100%
        -: 1136:
        -: 1137:      if(DEBUG) {
        -: 1138:         printf("Cards Left: %d\n", supplyCount(choice, state));
        -: 1139:      }
        2: 1140:      return -1;
        -: 1141:   }
        5: 1142:   else if(state->coins < getCost(choice)) {
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
        1: 1143:      printf("That card is too expensive!\n");
call    0 returned 100%
        -: 1144:
        -: 1145:      if(DEBUG) {
        -: 1146:         printf("Coins: %d < %d\n", state->coins, getCost(choice));
        -: 1147:      }
        1: 1148:      return -1;
        -: 1149:   }
        -: 1150:   else {
        -: 1151:      if(DEBUG) {
        -: 1152:         cardCountHand = state->handCount[currentPlayer];
        -: 1153:         cardCountDeck = state->deckCount[currentPlayer];
        -: 1154:         cardCountDiscard = state->discardCount[currentPlayer];
        -: 1155:         cardCountTotal = cardCountHand + cardCountDeck + cardCountDiscard;
        -: 1156:         printf("Deck Count: %d\n", cardCountTotal);
        -: 1157:      }
        -: 1158:      // discard and trash the feast card
        4: 1159:      discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -: 1160:
        4: 1161:      gainCard(choice, state, 0, currentPlayer); // Gain the card
call    0 returned 100%
        -: 1162:
        -: 1163:      if(DEBUG) { 
        -: 1164:         cardCountHand = state->handCount[currentPlayer];
        -: 1165:         cardCountDeck = state->deckCount[currentPlayer];
        -: 1166:         cardCountDiscard = state->discardCount[currentPlayer];
        -: 1167:         cardCountTotal = cardCountHand + cardCountDeck + cardCountDiscard;
        -: 1168:         printf("Deck Count: %d\n", cardCountTotal);
        -: 1169:      }
        -: 1170:   }
        4: 1171:   return 0;
        -: 1172:}
        -: 1173:
        -: 1174:// Minion is a +1 action card
function minionEffect called 0 returned 0% blocks executed 0%
    #####: 1175:int minionEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1176:{
        -: 1177:   int i;
        -: 1178:   int j;
    #####: 1179:   int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1180:
    #####: 1181:   state->numActions++;
        -: 1182:
        -: 1183:   // discard card from hand
    #####: 1184:   discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1185:
        -: 1186:   // if the player chooses the +2 coins option
    #####: 1187:   if(choice1) {
branch  0 never executed
branch  1 never executed
    #####: 1188:      state->coins = state->coins + 2;
        -: 1189:   }
        -: 1190:
        -: 1191:   // if the players chooses to discard hand, redraw 4, and other players with
        -: 1192:   // 5+ cards discard hand and draw 4
    #####: 1193:   else if(choice2) {
branch  0 never executed
branch  1 never executed
        -: 1194:      // discard hand
    #####: 1195:      while(numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1196:         discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1197:      }
        -: 1198:      // draw 4
    #####: 1199:      for(i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1200:         drawCard(currentPlayer, state);
call    0 never executed
        -: 1201:      }
        -: 1202:      // other players discard hand redraw if hand size > 4
    #####: 1203:      for(i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1204:         if((i != currentPlayer) && ((state->handCount[i]) > 4)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1205:            // discard hand
    #####: 1206:            while(state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1207:               discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1208:            }
        -: 1209:            // draw 4
    #####: 1210:            for(j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1211:               drawCard(i, state);
call    0 never executed
        -: 1212:            }
        -: 1213:         }
        -: 1214:      }
        -: 1215:   }
    #####: 1216:   return 0;
        -: 1217:}
        -: 1218:
function mineEffect called 8 returned 100% blocks executed 100%
        8: 1219:int mineEffect(int choice1, int choice2, struct gameState *state, int handPos) 
        -: 1220:{
        -: 1221:   int i;
        8: 1222:   int currentPlayer = whoseTurn(state);
call    0 returned 100%
        8: 1223:   int j = state->hand[currentPlayer][choice1]; // store card we will trash
        -: 1224:
       15: 1225:   if((state->hand[currentPlayer][choice1] < copper) ||
branch  0 taken 88% (fallthrough)
branch  1 taken 13%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
        7: 1226:      (state->hand[currentPlayer][choice1] > gold)) {
        2: 1227:      return -1;
        -: 1228:   }
        6: 1229:   if((choice2 > treasure_map) || (choice2 < curse)) {
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
        2: 1230:      return -1;
        -: 1231:   }
        4: 1232:   if((getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        1: 1233:      return -1;
        -: 1234:   }
        3: 1235:   gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -: 1236:
        -: 1237:   // discard card from hand
        3: 1238:   discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1239:
        -: 1240:   // discard trashed card
        6: 1241:   for(i = 0; i < (state->handCount[currentPlayer]); i++) {
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        6: 1242:      if((state->hand[currentPlayer][i]) == j) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        3: 1243:         discardCard(i, currentPlayer, state, 1);
call    0 returned 100%
        3: 1244:         break;
        -: 1245:      }
        -: 1246:   }
        3: 1247:   return 0;
        -: 1248:}
        -: 1249:
function discardCard called 13 returned 100% blocks executed 89%
       13: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:	
        -: 1253:  //if card is not trashed, added to Played pile 
       13: 1254:  if (trashFlag < 1)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -: 1255:    {
        -: 1256:      //add card to played pile
        6: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1258:      state->playedCardCount++;
        -: 1259:    }
        -: 1260:	
        -: 1261:  //set played card to -1
       13: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:	
        -: 1264:  //remove card from player's hand
       13: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
        1: 1268:      state->handCount[currentPlayer]--;
        -: 1269:    }
       12: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:  else 	
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
       12: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
       12: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
       12: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:	
       13: 1285:  return 0;
        -: 1286:}
        -: 1287:
function gainCard called 7 returned 100% blocks executed 90%
        7: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:	
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1293:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
        -: 1294:    {
        1: 1295:      return -1;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
        6: 1303:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
        -: 1307:    }
        6: 1308:  else if (toFlag == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1309:    {
        2: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1311:      state->handCount[player]++;
        -: 1312:    }
        -: 1313:  else
        -: 1314:    {
        4: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:	
        -: 1319:  //decrease number in supply pile
        6: 1320:  state->supplyCount[supplyPos]--;
        -: 1321:	 
        6: 1322:  return 0;
        -: 1323:}
        -: 1324:
function updateCoins called 68 returned 100% blocks executed 100%
       68: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:	
        -: 1329:  //reset coin count
       68: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
      411: 1333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1334:    {
      343: 1335:      if (state->hand[player][i] == copper)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
        -: 1336:	{
      130: 1337:	  state->coins += 1;
        -: 1338:	}
      213: 1339:      else if (state->hand[player][i] == silver)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1340:	{
        2: 1341:	  state->coins += 2;
        -: 1342:	}
      211: 1343:      else if (state->hand[player][i] == gold)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1344:	{
        3: 1345:	  state->coins += 3;
        -: 1346:	}	
        -: 1347:    }	
        -: 1348:
        -: 1349:  //add bonus
       68: 1350:  state->coins += bonus;
        -: 1351:
       68: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
